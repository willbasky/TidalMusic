import Data.List
import Data.Maybe
import Sound.Tidal.Bjorklund

durval intervals values = Pattern Digital $ \q -> evs q where
  evs q = map (toEvent q)
    $ take (ie q - is q + 1)
    $ drop (is q)
    $ arcValues
  toEvent q arcValue =
    Event (fst arcValue) (sect (fst arcValue)
        (arc q)) (snd arcValue)
  arcValues = zip arcs (cycle values)
  arcs = zipWith Arc starts stops
  starts = scanl (+) 0 $ cycle intervals
  stops = drop 1 starts
  is q = fromJust $ findIndex (> (start $ arc q)) stops
  ie q = fromJust $ findIndex (>= (stop $ arc q)) stops

d1 $ n (durval [1%4, 1%2, 1] [0, 3, 4]) # s "superpiano"

d1 $ n ("c'maj e'maj f'maj, c'min e'min f'min") # s "supermandolin"

d1 $ n ("c e f" |+ "<'maj 'min>") # s "supermandolin"

d1 $ n("c4'maj c5'maj c6'maj") # s "supermandolin"

d1 $ n "cf4'maj c4'maj cs4'maj" # s "superpiano"
    # sustain "2 4 1"

d1 $ sound "[supermandolin:1 supermandolin:3 supermandolin:6]*2"
d2 $ sound "supermandolin:8 <supermandolin:9 supermandolin:11>"
d3 $ sound "superkick"
d4 $ sound "~ superclap/4"
d5 $ sound "808:4/6 <east can 808:2>"
d6 $ sound "~ supermandolin ~ supermandolin:3/2"

d1 $ n (toScale [0,2,4,5,7,9,11,5]
    $ ("[1 ~ 1 5 ~ 5 6 ~ 6 4 ~ 3 4 ~ 1]/2"-2 + "[0,2,4]"))
    # s "superpiano"

d1
    $ iter 3
    -- $ _ply "3 4 2"
    $ stack
        [ ghost $ sound "~ <can east> 808"
        , sound "bd*2 [~ bd]"
        ]

d1 $ every 3 (ply 4) $ s "bd ~ sn cp"

d1 $ linger 0.25 $ n "0 2 [3 4] 2" # sound "arpy"

d1 $ every 4 (linger 0.25) $ n "0 2 [3 4] 2" # sound "arpy"

d1 $ every 2 (linger 0.25) $ loopAt 3 $ chop 18 $ sound "breaks125"

d1 $ linger "<0.75 0.25 1>" $ sound "bd sn:2 [mt rs] hc"

p "rot"
    $ rot "1 0"
    $ ghost
    $ linger "<0.25 0.5 1>"
    $ loopAt 2
    $ chop 8
    $ sound "can:1 east:2"

d1 $ rot "<0 0 1 3>" $ n "0 ~ 1 2 0 2 ~ 3*2" # sound "drum"

d1 $ n (slow 2 $ segment 16 $ range 0 32 $ sine) # sound "amencutup"

whenmodr speeds numerators denominators modifier pattern
    | done = modifiedpattern
    | otherwise =  whenmodr rests restn restd modifier modifiedpattern
    where modifiedpattern = outside speed (whenmod numerator denominator (modifier)) $ pattern
          numerator = (head numerators)
          denominator = (head denominators)
          speed = (head speeds)
          done = (null $ tail speeds) && (null $ tail numerators) && (null $ tail denominators)
          restn = if null (tail numerators) then [numerator] else (tail numerators)
          restd = if null (tail denominators) then [denominator] else (tail denominators)
          rests = if null (tail speeds) then [speed] else (tail speeds)

d1 $ fast 1
    $ whenmodr (map (/8) [1,2,4,8,16,32]) [3] [1, 3, 2] ((+ n 1).(+ note "5"))
    $ note "[7 0 3 0]" + note 7
    # s "moog" * release 1

d1 $ whenmod 16 14 (# speed "2") $ sound "suho"

setcps 1

p "suhonen"
    -- $ ghost
    $ slow 5
    $ s "suhonen:29"
    # orbit 0

p "suhonen" silence

p "jackie"
    $ slow 2
    $ s "[jackie:3, ~ bd bd cp]"
    # cut 1

p "c64" silence

distrib'' xs = (foldr distrib' (replicate (last xs) True) (reverse $ layers xs))
  where
    distrib' :: [Bool] -> [Bool] -> [Bool]
    distrib' [] _ = []
    distrib' (_:a) [] = False : distrib' a []
    distrib' (True:a) (x:b) = x : distrib' a b
    distrib' (False:a) b = False : distrib' a b
    layers = map bjorklund . (zip<*>tail)
    boolsToPat a b' = flip const <$> filterValues (== True) (fastFromList a) <*> b'

eheir xs = if length xs > 2 then (zipWith (\x y -> x + y) cur (eheir (tail xs))) else cur
            where cur = map (\x -> if x then 1 else 0) (distrib'' xs)

d1 $ n (toScale [0,2,3,5,7,8,10] (fastCat $ eheir [1,2,5,7,9,12,16])) + s "drum" * release 0.6

